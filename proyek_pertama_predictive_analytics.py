# -*- coding: utf-8 -*-
"""Proyek Pertama : Predictive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12qtMzam0qLikSXTrLb5bkp8vSTpkU_pa
"""

# Nabiel Muhammad Imjauzanansyah
# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.metrics import mean_squared_error

"""Memuat dataset `diabetes.csv` ke dalam DataFrame menggunakan pandas."""

# 2. Load Dataset
df = pd.read_csv('diabetes.csv')

"""Menampilkan 5 baris pertama dari dataset untuk memahami struktur data."""

print(df.info())

"""Memeriksa apakah ada nilai kosong atau null dalam dataset."""

print(df.describe())

"""Menampilkan ringkasan statistik dari setiap kolom numerik pada dataset.
dan juga Dari grafik terlihat bahwa jumlah data dengan label 0 (tidak diabetes) lebih banyak dibanding label 1 (diabetes), yang mengindikasikan adanya ketidakseimbangan kelas. Ini penting diperhatikan saat melatih model, karena model bisa cenderung memprediksi kelas mayoritas.


"""

sns.countplot(data=df, x='Outcome')
plt.title('Distribusi Kelas Target (Outcome)')
plt.show()

"""Membuat heatmap korelasi antar fitur untuk melihat hubungan antar variabel."""

features = [
    'Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
    'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'
]

plt.figure(figsize=(15, 20))
for i, col in enumerate(features):
    plt.subplot(4, 2, i + 1)
    # Menggunakan df[col] untuk mengakses data kolom dari DataFrame
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribusi {col}')
    plt.xlabel(col)
    plt.ylabel('Frekuensi')
plt.tight_layout()
plt.show()

"""Memisahkan fitur (X) dan label (y) dari dataset untuk keperluan pelatihan model."""

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Matriks Korelasi')
plt.show()

"""# Split Data
Membagi dataset menjadi data latih dan data uji dengan rasio tertentu (misalnya 80:20).
"""

cols_with_zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
df[cols_with_zero] = df[cols_with_zero].replace(0, np.nan)

df[cols_with_zero] = df[cols_with_zero].fillna(df[cols_with_zero].median())

"""Melakukan normalisasi pada fitur agar memiliki skala yang seragam."""

X = df.drop('Outcome', axis=1)
y = df['Outcome']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""Menghitung akurasi model terhadap data uji. dengan model K-Nearest Neighbors"""

models = {
    'K-Nearest Neighbors': KNeighborsClassifier(),
}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)
    precision = report['1']['precision']
    recall = report['1']['recall']
    f1 = report['1']['f1-score']

    print(f"--- Metrics for {name} ---")
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print(f"Akurasi: {accuracy:.2f}")
    print(f"Presisi: {precision:.2f}")
    print(f"Recall: {recall:.2f}")
    print(f"F1-score: {f1:.2f}")
    print("-" * 30)

"""Melakukan prediksi dan menampilkan metrik evaluasi seperti confusion matrix dan classification report."""

best_model = RandomForestClassifier(random_state=42)
best_model.fit(X_train, y_train)
y_pred_best = best_model.predict(X_test)
sns.heatmap(confusion_matrix(y_test, y_pred_best), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix - K-Nearest Neighbors')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()